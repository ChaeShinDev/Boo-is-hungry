# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: actions/checkout@v4
      - name: Creates DEV Environment Configuration # 정말 마음에 들지 않는 방법이다. Github Action 직접 만드는 게 낫겠다. 바빠서 봐준다.
        run: |
          touch ./src/main/resources/application-prod.yml
          echo "${{ secrets.APPLICATION_PROD }}" > ./src/main/resources/application-prod.yml
          cd ./src/main/resources
          ls -a
        shell: bash
                
      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Execute Permission For Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper (Without Test)
        run: ./gradlew clean build -x test

      - name: Build Application Docker Image & Push to Repo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f dockerfile-app -t ${{ secrets.DOCKER_USERNAME }}/project-image-repo .
          docker push ${{ secrets.DOCKER_USERNAME }}/project-image-repo

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
            submodules: true
            token: ${{ secrets.MODULE_TOKEN }}

      - name: Copying docker-compose.yml into Host System.
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_KNOWNHOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          overwrite: true
          source: "./server-config/docker-compose.yml"
          target: /home/ubuntu/boo
          strip_components: 2

      # - name: Verify docker-compose.yml exists
      #   run: ls -al /home/ubuntu/boo/docker-compose.yml
        
      - name: Copying default.conf into Host System.
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_KNOWNHOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: 22
          overwrite: true
          source: "./server-config/nginx/conf.d/default.conf"
          target: /home/ubuntu/boo/nginx/conf.d
          strip_components: 4
          
      # - name: Verify default.conf exists
      #   run: ls -al /home/ubuntu/boo/nginx/conf.d/default.conf

      - name: Docker Compose Up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_KNOWNHOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/boo
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            docker compose up -d

    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
